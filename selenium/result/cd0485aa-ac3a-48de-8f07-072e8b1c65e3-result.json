{"name": "test_baidu", "status": "broken", "statusDetails": {"message": "Exception", "trace": "self = <selenium_demo2.TestBaidu object at 0x000001D93A755CD0>\n\n    def test_baidu(self):\n        \"\"\"\n        1、实现代码异常时，截图/打印page_source\n        实现方法： try catch 配合截图/ page_source操作\n    \n        :return:\n        \"\"\"\n        self.driver = webdriver.Chrome()\n        self.driver.get(\"https://www.baidu.com/\")\n    \n        try:\n            # 如果发生异常\n>           self.driver.find_element(By.ID, \"su1\")\n\nselenium_demo2.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\python3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\python3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D93B337830>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF7284581FF]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF4F21257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF50C6AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[id=\"su1\"]\"}\nE         (Session info: chrome=129.0.6668.60); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7284EFDA5+29557]\nE       \t(No symbol) [0x00007FF728462240]\nE       \t(No symbol) [0x00007FF72831B6EA]\nE       \t(No symbol) [0x00007FF72836FA15]\nE       \t(No symbol) [0x00007FF72836FC6C]\nE       \t(No symbol) [0x00007FF7283BBB07]\nE       \t(No symbol) [0x00007FF72839753F]\nE       \t(No symbol) [0x00007FF7283B88A3]\nE       \t(No symbol) [0x00007FF7283972A3]\nE       \t(No symbol) [0x00007FF7283612DF]\nE       \t(No symbol) [0x00007FF728362451]\nE       \tGetHandleVerifier [0x00007FF72881DCBD+3363469]\nE       \tGetHandleVerifier [0x00007FF728869B47+3674391]\nE       \tGetHandleVerifier [0x00007FF72885EAEB+3629243]\nE       \tGetHandleVerifier [0x00007FF7285AFC66+815670]\nE       \t(No symbol) [0x00007FF72846D6EF]\nE       \t(No symbol) [0x00007FF7284692B4]\nE       \t(No symbol) [0x00007FF728469450]\nE       \t(No symbol) [0x00007FF7284581FF]\nE       \tBaseThreadInitThunk [0x00007FFF4F21257D+29]\nE       \tRtlUserThreadStart [0x00007FFF50C6AF28+40]\n\nD:\\python3\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <selenium_demo2.TestBaidu object at 0x000001D93A755CD0>\n\n    def test_baidu(self):\n        \"\"\"\n        1、实现代码异常时，截图/打印page_source\n        实现方法： try catch 配合截图/ page_source操作\n    \n        :return:\n        \"\"\"\n        self.driver = webdriver.Chrome()\n        self.driver.get(\"https://www.baidu.com/\")\n    \n        try:\n            # 如果发生异常\n            self.driver.find_element(By.ID, \"su1\")\n    \n        except:\n            # 出现异常的处理\n            print(\"出现异常啦\")\n            # 截图操作\n            timestamp = int(time.time())\n            # 提前创建好 images 路径\n            image_path = f\"./images/image_{timestamp}.PNG\"\n            # 截图\n            self.driver.save_screenshot(image_path)\n            # 将截图放到报告的数据中\n            allure.attach.file(image_path, name=\"picture\", attachment_type=allure.attachment_type.PNG)\n    \n            # 提前创建好 page_source 路径\n            timestamp = int(time.time())\n            page_source_path = f\"./page_source/page_source_{timestamp}.HTML\"\n            # 记录 page_source\n            with open(page_source_path, \"w\", encoding=\"u8\") as f:\n                f.write(self.driver.page_source)\n            # 将 page_source 放到报告的数据中,如果想要 html源码格式 使用 text, 如果想要 网页格式 就用 html\n            allure.attach.file(page_source_path, name=\"page_source\", attachment_type=allure.attachment_type.TEXT)\n            allure.attach.file(page_source_path, name=\"page_source\", attachment_type=allure.attachment_type.HTML)\n    \n            # 将异常给抛回去\n>           raise Exception\nE           Exception\n\nselenium_demo2.py:130: Exception"}, "description": "\n        1、实现代码异常时，截图/打印page_source\n        实现方法： try catch 配合截图/ page_source操作\n\n        :return:\n        ", "attachments": [{"name": "picture", "source": "cdf8ab0e-1b06-417b-957f-a549281da887-attachment.png", "type": "image/png"}, {"name": "page_source", "source": "f40de440-a583-4298-adcc-1dea35841471-attachment.txt", "type": "text/plain"}, {"name": "page_source", "source": "2ea0763b-bb4c-4076-807f-0a594ee07a69-attachment.html", "type": "text/html"}, {"name": "log", "source": "41ab053e-57b3-4a0c-a0fe-e197af18219b-attachment.txt", "type": "text/plain"}], "start": 1728022947816, "stop": 1728022950237, "uuid": "de9f9db1-546f-44e6-b38e-3b8d66b146f5", "historyId": "14872adf14105248a7eb022ed59b4ea6", "testCaseId": "14872adf14105248a7eb022ed59b4ea6", "fullName": "selenium_demo2.TestBaidu#test_baidu", "labels": [{"name": "suite", "value": "selenium_demo2"}, {"name": "subSuite", "value": "TestBaidu"}, {"name": "host", "value": "wangmin"}, {"name": "thread", "value": "9992-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "selenium_demo2"}]}