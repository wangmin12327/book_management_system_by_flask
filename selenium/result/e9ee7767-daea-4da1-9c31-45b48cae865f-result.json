{"name": "test_baidu", "status": "broken", "statusDetails": {"message": "Exception", "trace": "arg = (<selenium_demo2.TestBaidu object at 0x000001BA917CEB70>,), kwargs = {}\n\n    def inner(*arg, **kwargs):\n        # func(*args, **kwargs)\n        try:\n            # 当被装饰方法/函数发生异常就被捕获并作数据记录\n>           func(*arg, **kwargs)\n\nselenium_demo2.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nselenium_demo2.py:140: in test_baidu\n    self.driver.find_element(By.ID, \"su1\")\nD:\\python3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\python3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001BA915EF920>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF63E6A81FF]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF4F21257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF50C6AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[id=\"su1\"]\"}\nE         (Session info: chrome=129.0.6668.90); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF63E73FDA5+29557]\nE       \t(No symbol) [0x00007FF63E6B2240]\nE       \t(No symbol) [0x00007FF63E56B6EA]\nE       \t(No symbol) [0x00007FF63E5BFA15]\nE       \t(No symbol) [0x00007FF63E5BFC6C]\nE       \t(No symbol) [0x00007FF63E60BB07]\nE       \t(No symbol) [0x00007FF63E5E753F]\nE       \t(No symbol) [0x00007FF63E6088A3]\nE       \t(No symbol) [0x00007FF63E5E72A3]\nE       \t(No symbol) [0x00007FF63E5B12DF]\nE       \t(No symbol) [0x00007FF63E5B2451]\nE       \tGetHandleVerifier [0x00007FF63EA6DCBD+3363469]\nE       \tGetHandleVerifier [0x00007FF63EAB9B47+3674391]\nE       \tGetHandleVerifier [0x00007FF63EAAEAEB+3629243]\nE       \tGetHandleVerifier [0x00007FF63E7FFC66+815670]\nE       \t(No symbol) [0x00007FF63E6BD6EF]\nE       \t(No symbol) [0x00007FF63E6B92B4]\nE       \t(No symbol) [0x00007FF63E6B9450]\nE       \t(No symbol) [0x00007FF63E6A81FF]\nE       \tBaseThreadInitThunk [0x00007FFF4F21257D+29]\nE       \tRtlUserThreadStart [0x00007FFF50C6AF28+40]\n\nD:\\python3\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\narg = (<selenium_demo2.TestBaidu object at 0x000001BA917CEB70>,), kwargs = {}\n\n    def inner(*arg, **kwargs):\n        # func(*args, **kwargs)\n        try:\n            # 当被装饰方法/函数发生异常就被捕获并作数据记录\n            func(*arg, **kwargs)\n            # 如果发生异常\n            # self.driver.find_element(By.ID, \"su1\")\n    \n        except:\n            # 出现异常的处理\n            print(\"出现异常啦\")\n            # # 截图操作\n            # timestamp = int(time.time())\n            # # 提前创建好 images 路径\n            # image_path = f\"./images/image_{timestamp}.PNG\"\n            # # 截图\n            # self.driver.save_screenshot(image_path)\n            # # 将截图放到报告的数据中\n            # allure.attach.file(image_path, name=\"picture\", attachment_type=allure.attachment_type.PNG)\n            #\n            # # 提前创建好 page_source 路径\n            # timestamp = int(time.time())\n            # page_source_path = f\"./page_source/page_source_{timestamp}.HTML\"\n            # # 记录 page_source\n            # with open(page_source_path, \"w\", encoding=\"u8\") as f:\n            #     f.write(self.driver.page_source)\n            # # 将 page_source 放到报告的数据中,如果想要 html源码格式 使用 text, 如果想要 网页格式 就用 html\n            # allure.attach.file(page_source_path, name=\"page_source\", attachment_type=allure.attachment_type.TEXT)\n            # allure.attach.file(page_source_path, name=\"page_source\", attachment_type=allure.attachment_type.HTML)\n    \n            # 将异常给抛回去\n>           raise Exception\nE           Exception\n\nselenium_demo2.py:124: Exception"}, "attachments": [{"name": "log", "source": "c3db77ea-7142-4c82-a83b-6970e61e38fd-attachment.txt", "type": "text/plain"}], "start": 1728024025721, "stop": 1728024028547, "uuid": "e3dfb8da-2a84-4157-9111-7ec7070f1ed6", "historyId": "14872adf14105248a7eb022ed59b4ea6", "testCaseId": "14872adf14105248a7eb022ed59b4ea6", "fullName": "selenium_demo2.TestBaidu#test_baidu", "labels": [{"name": "suite", "value": "selenium_demo2"}, {"name": "subSuite", "value": "TestBaidu"}, {"name": "host", "value": "wangmin"}, {"name": "thread", "value": "12796-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "selenium_demo2"}]}