{"name": "test_baidu", "status": "broken", "statusDetails": {"message": "Exception", "trace": "self = <exception_auto_screen.TestBaidu object at 0x000001929FFAD640>\n\n    def test_baidu(self):\n        self.driver.get(\"https://www.baidu.com\")\n>       self.find().click()\n\nexception_auto_screen.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (<exception_auto_screen.TestBaidu object at 0x000001929FFAD640>,), kwargs = {}\n\n    def inner(*args, **kwargs):\n        \"\"\"\n        内函数，实现封装异常捕获处理的代码\n        :param args: 不定长参数，是个元组，args[0] 是 TestBaidu类的实例对象，相当于self\n        :param kwargs:\n        :return:\n        \"\"\"\n        # 获取TestBaidu类中被装饰方法的self，也就是实例对象,args[0]相当于self，args[0].driver = self.driver\n        # 前提条件： TestBaidu类中的driver变量是一个实例变量 self.driver\n        try:\n            # 当被装饰方法/函数发生异常，就捕获并做数据记录\n            func(*args, **kwargs)\n        except Exception:\n            # ====问题3： 被装饰的函数test_baidu()还没执行, 就先调用了装饰器ui_exception_record，此时还没有self.driver,导致args[0]还获取不到self\n            # 解决方案一：获取self.driver的操作，放在装饰器中被装饰的函数func(*args, **kwargs)之后\n            driver = args[0].driver\n            # 出现异常情况\n            # print(\"出现异常情况\")\n            # 截图操作\n            timestamp = int(time.time())\n            image_path = f\"../images/image_{timestamp}.PNG\"\n            driver.save_screenshot(image_path)\n    \n            # page_source操作\n            page_source_path = f\"../page_source/page_source_{timestamp}.HTML\"\n            with open(page_source_path, \"w\", encoding=\"utf8\") as f:\n                f.write(driver.page_source)\n    \n            # 将截图放到allure报告中\n            allure.attach.file(image_path, name=\"picture\", attachment_type=allure.attachment_type.PNG)\n            # 将page_source放到allure报告中\n            # 如果想要HTML格式展示在报告中，则使用HTML\n            allure.attach.file(page_source_path, name=\"page_source\", attachment_type=allure.attachment_type.HTML)\n            # 如果想要TEXT格式展示在报告中，则使用TEXT\n            allure.attach.file(page_source_path, name=\"page_source\", attachment_type=allure.attachment_type.HTML)\n    \n        # 待截图和page_source数据保存完成后，抛出异常，此时用例会按正常情况，执行失败\n>       raise Exception\nE       Exception\n\nexception_auto_screen.py:59: Exception"}, "start": 1717251000200, "stop": 1717251000737, "uuid": "5da18977-2968-4c3c-9c0a-21239a2aba64", "historyId": "69fa345fbeaa39b027e4e96b66312866", "testCaseId": "69fa345fbeaa39b027e4e96b66312866", "fullName": "exception_auto_screen.TestBaidu#test_baidu", "labels": [{"name": "suite", "value": "exception_auto_screen"}, {"name": "subSuite", "value": "TestBaidu"}, {"name": "host", "value": "wangmin"}, {"name": "thread", "value": "29124-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "exception_auto_screen"}]}