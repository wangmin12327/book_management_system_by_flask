{"name": "test_baidu", "status": "broken", "statusDetails": {"message": "Exception", "trace": "args = (<exception_auto_screen.TestBaidu object at 0x000001B3FDF89FD0>,), kwargs = {}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2f36a73fe066b48cfa8c0e871f4f3ab8\")>, timestamp = 1717214320\nimage_path = '../images/image_1717214320.PNG', page_source_path = '../page_source/page_source_1717214320.HTML'\nf = <_io.TextIOWrapper name='../page_source/page_source_1717214320.HTML' mode='w' encoding='utf8'>\n\n    def inner(*args, **kwargs):\n        \"\"\"\n        内函数，实现封装异常捕获处理的代码\n        :param args: 不定长参数，是个元组，args[0] 是 TestBaidu类的实例对象，相当于self\n        :param kwargs:\n        :return:\n        \"\"\"\n        # 获取TestBaidu类中被装饰方法的self，也就是实例对象,args[0]相当于self，args[0].driver = self.driver\n        # 前提条件： TestBaidu类中的driver变量是一个实例变量 self.driver\n        try:\n            # 当被装饰方法/函数发生异常，就捕获并做数据记录\n            func(*args, **kwargs)\n        except Exception:\n            # ====问题3： 被装饰的函数test_baidu()还没执行, 就先调用了装饰器ui_exception_record，此时还没有self.driver,导致args[0]还获取不到self\n            # 解决方案：获取self.driver的操作，放在装饰器中被装饰的函数func(*args, **kwargs)之后\n            driver = args[0].driver\n            # 出现异常情况\n            # print(\"出现异常情况\")\n            # 截图操作\n            timestamp = int(time.time())\n            image_path = f\"../images/image_{timestamp}.PNG\"\n            driver.save_screenshot(image_path)\n    \n            # page_source操作\n            page_source_path = f\"../page_source/page_source_{timestamp}.HTML\"\n            with open(page_source_path, \"w\", encoding=\"utf8\") as f:\n                f.write(driver.page_source)\n    \n            # 将截图放到allure报告中\n            allure.attach.file(image_path, name=\"picture\", attachment_type=allure.attachment_type.PNG)\n            # 将page_source放到allure报告中\n            # 如果想要HTML格式展示在报告中，则使用HTML\n            allure.attach.file(page_source_path, name=\"page_source\", attachment_type=allure.attachment_type.HTML)\n            # 如果想要TEXT格式展示在报告中，则使用TEXT\n            allure.attach.file(page_source_path, name=\"page_source\", attachment_type=allure.attachment_type.HTML)\n    \n        # 待截图和page_source数据保存完成后，抛出异常，此时用例会按正常情况，执行失败\n>       raise Exception\nE       Exception\n\nexception_auto_screen.py:56: Exception"}, "description": "\n        内函数，实现封装异常捕获处理的代码\n        :param args: 不定长参数，是个元组，args[0] 是 TestBaidu类的实例对象，相当于self\n        :param kwargs:\n        :return:\n        ", "attachments": [{"name": "picture", "source": "08cd7d42-3c19-426c-a2b0-155c480ac604-attachment.png", "type": "image/png"}, {"name": "page_source", "source": "9d802ea4-7556-4ca8-a2ec-8a7fad75966e-attachment.html", "type": "text/html"}, {"name": "page_source", "source": "34b4891e-0798-4fb1-a198-b1db9d51cb32-attachment.html", "type": "text/html"}], "start": 1717214318702, "stop": 1717214320889, "uuid": "5a89b788-d67e-469c-9ac4-65cb3a9f8fd6", "historyId": "69fa345fbeaa39b027e4e96b66312866", "testCaseId": "69fa345fbeaa39b027e4e96b66312866", "fullName": "exception_auto_screen.TestBaidu#test_baidu", "labels": [{"name": "suite", "value": "exception_auto_screen"}, {"name": "subSuite", "value": "TestBaidu"}, {"name": "host", "value": "wangmin"}, {"name": "thread", "value": "23980-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "exception_auto_screen"}]}