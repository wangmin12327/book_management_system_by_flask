{"name": "test_baidu", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: './page_source/page_source_1717214022.HTML'", "trace": "args = (<exception_auto_screen.TestBaidu object at 0x000001DA317FE990>,), kwargs = {}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fbf9b49c15104dae9d0b08d888a96dfa\")>, timestamp = 1717214022\nimage_path = './images/image_1717214022.PNG', page_source_path = './page_source/page_source_1717214022.HTML'\n\n    def inner(*args, **kwargs):\n        \"\"\"\n        内函数，实现封装异常捕获处理的代码\n        :param args: 不定长参数，是个元组，args[0] 是 TestBaidu类的实例对象，相当于self\n        :param kwargs:\n        :return:\n        \"\"\"\n        # 获取TestBaidu类中被装饰方法的self，也就是实例对象,args[0]相当于self，args[0].driver = self.driver\n        # 前提条件： TestBaidu类中的driver变量是一个实例变量 self.driver\n        try:\n            # 当被装饰方法/函数发生异常，就捕获并做数据记录\n>           func(*args, **kwargs)\n\nexception_auto_screen.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nexception_auto_screen.py:68: in test_baidu\n    self.driver.find_element(By.ID, \"su1\")\nD:\\python3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\python3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DA31767500>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF611D22F6F]\\\\n\\\\tBaseThreadInitThunk [0x00007FF89A96257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF89C62AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[id=\"su1\"]\"}\nE         (Session info: chrome=125.0.6422.114); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF611DB1F22+60322]\nE       \t(No symbol) [0x00007FF611D2CE99]\nE       \t(No symbol) [0x00007FF611BE7EBA]\nE       \t(No symbol) [0x00007FF611C37676]\nE       \t(No symbol) [0x00007FF611C3773C]\nE       \t(No symbol) [0x00007FF611C7E967]\nE       \t(No symbol) [0x00007FF611C5C25F]\nE       \t(No symbol) [0x00007FF611C7BC80]\nE       \t(No symbol) [0x00007FF611C5BFC3]\nE       \t(No symbol) [0x00007FF611C29617]\nE       \t(No symbol) [0x00007FF611C2A211]\nE       \tGetHandleVerifier [0x00007FF6120C946D+3301613]\nE       \tGetHandleVerifier [0x00007FF612113693+3605267]\nE       \tGetHandleVerifier [0x00007FF612109410+3563664]\nE       \tGetHandleVerifier [0x00007FF611E642F6+790390]\nE       \t(No symbol) [0x00007FF611D374DF]\nE       \t(No symbol) [0x00007FF611D333D4]\nE       \t(No symbol) [0x00007FF611D33562]\nE       \t(No symbol) [0x00007FF611D22F6F]\nE       \tBaseThreadInitThunk [0x00007FF89A96257D+29]\nE       \tRtlUserThreadStart [0x00007FF89C62AA48+40]\n\nD:\\python3\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nargs = (<exception_auto_screen.TestBaidu object at 0x000001DA317FE990>,), kwargs = {}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fbf9b49c15104dae9d0b08d888a96dfa\")>, timestamp = 1717214022\nimage_path = './images/image_1717214022.PNG', page_source_path = './page_source/page_source_1717214022.HTML'\n\n    def inner(*args, **kwargs):\n        \"\"\"\n        内函数，实现封装异常捕获处理的代码\n        :param args: 不定长参数，是个元组，args[0] 是 TestBaidu类的实例对象，相当于self\n        :param kwargs:\n        :return:\n        \"\"\"\n        # 获取TestBaidu类中被装饰方法的self，也就是实例对象,args[0]相当于self，args[0].driver = self.driver\n        # 前提条件： TestBaidu类中的driver变量是一个实例变量 self.driver\n        try:\n            # 当被装饰方法/函数发生异常，就捕获并做数据记录\n            func(*args, **kwargs)\n        except Exception:\n            # ====问题3： 被装饰的函数test_baidu()还没执行, 就先调用了装饰器ui_exception_record，此时还没有self.driver,导致args[0]还获取不到self\n            # 解决方案：获取self.driver的操作，放在装饰器中被装饰的函数func(*args, **kwargs)之后\n            driver = args[0].driver\n            # 出现异常情况\n            # print(\"出现异常情况\")\n            # 截图操作\n            timestamp = int(time.time())\n            image_path = f\"./images/image_{timestamp}.PNG\"\n            driver.save_screenshot(image_path)\n    \n            # page_source操作\n            page_source_path = f\"./page_source/page_source_{timestamp}.HTML\"\n>           with open(page_source_path, \"w\", encoding=\"utf8\") as f:\nE           FileNotFoundError: [Errno 2] No such file or directory: './page_source/page_source_1717214022.HTML'\n\nexception_auto_screen.py:44: FileNotFoundError"}, "description": "\n        内函数，实现封装异常捕获处理的代码\n        :param args: 不定长参数，是个元组，args[0] 是 TestBaidu类的实例对象，相当于self\n        :param kwargs:\n        :return:\n        ", "start": 1717214020534, "stop": 1717214022848, "uuid": "a0fd5614-a6d6-4a97-995e-aa9ad695dca5", "historyId": "69fa345fbeaa39b027e4e96b66312866", "testCaseId": "69fa345fbeaa39b027e4e96b66312866", "fullName": "exception_auto_screen.TestBaidu#test_baidu", "labels": [{"name": "suite", "value": "exception_auto_screen"}, {"name": "subSuite", "value": "TestBaidu"}, {"name": "host", "value": "wangmin"}, {"name": "thread", "value": "14640-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "exception_auto_screen"}]}