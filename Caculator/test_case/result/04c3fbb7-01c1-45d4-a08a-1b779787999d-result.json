{"name": "用户输入运算数据a、b, a、b的数据类型不合法", "status": "skipped", "statusDetails": {"message": "XFAIL\n\nAssertionError: 输入数据a、b不合法\nassert False", "trace": "self = <test_case.test_case_02.TestCase object at 0x0000012195DE80B0>, a = 'a', b = 'b', expected = '输入数据a、b不合法'\n\n    @allure.title(\"用户输入运算数据a、b, a、b的数据类型不合法\")\n    @allure.testcase(\"http://192.168.40.134:8080/projects/CACULATOR/issues/CACULATOR-2?filter=allissues\",\n                     \"用例管理系统\")\n    @allure.issue(\"http://192.168.40.134:8080/projects/BUG/issues/BUG-1?filter=allopenissues\", \"Bug管理系统\")\n    @pytest.mark.xfail\n    @pytest.mark.test_data_type_error\n    @pytest.mark.run(order=2)\n    @pytest.mark.parametrize('a,b,expected', GetData.get_data_type_error())\n    def test_div_data_type_error(self, a, b, expected):\n        \"\"\"\n        测试div()函数对输入数据的数据类型报错提示\n        :param a: 除int整型、float浮点型、double浮点型以外的其他数据类型\n        :param b: 除int整型、float浮点型、double浮点型以外的其他数据类型\n        :param expected: 输出报错提示: 输入的数据a、b数据类型不合法；\n        :return: 返回报错提示：输入的数据a、b数据类型不合法；\n        \"\"\"\n        # step4(a, b, expected)\n        with allure.step(\"1、输入数据a、b, a、b为除int整型、float浮点型、double浮点型以外的其他数据类型,调用add()方法；\"):\n            caculator = Caculator(a, b)\n            with open(\"../allure_print_screen/2.png\", mode=\"rb\") as f:\n                file = f.read()\n                allure.attach(file, \"报错页面截图\", attachment_type=allure.attachment_type.PNG)\n            try:\n                # 可能产生异常的代码块\n>               assert caculator.div() == expected\n\ntest_case_02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <func.func.Caculator object at 0x0000012195E87F80>\n\n    def div(self):\n>       if self.a > 99 or self.a < -99 or self.b > 99 or self.b < -99:\nE       TypeError: '>' not supported between instances of 'str' and 'int'\n\n..\\func\\func.py:39: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_case.test_case_02.TestCase object at 0x0000012195DE80B0>, a = 'a', b = 'b', expected = '输入数据a、b不合法'\n\n    @allure.title(\"用户输入运算数据a、b, a、b的数据类型不合法\")\n    @allure.testcase(\"http://192.168.40.134:8080/projects/CACULATOR/issues/CACULATOR-2?filter=allissues\",\n                     \"用例管理系统\")\n    @allure.issue(\"http://192.168.40.134:8080/projects/BUG/issues/BUG-1?filter=allopenissues\", \"Bug管理系统\")\n    @pytest.mark.xfail\n    @pytest.mark.test_data_type_error\n    @pytest.mark.run(order=2)\n    @pytest.mark.parametrize('a,b,expected', GetData.get_data_type_error())\n    def test_div_data_type_error(self, a, b, expected):\n        \"\"\"\n        测试div()函数对输入数据的数据类型报错提示\n        :param a: 除int整型、float浮点型、double浮点型以外的其他数据类型\n        :param b: 除int整型、float浮点型、double浮点型以外的其他数据类型\n        :param expected: 输出报错提示: 输入的数据a、b数据类型不合法；\n        :return: 返回报错提示：输入的数据a、b数据类型不合法；\n        \"\"\"\n        # step4(a, b, expected)\n        with allure.step(\"1、输入数据a、b, a、b为除int整型、float浮点型、double浮点型以外的其他数据类型,调用add()方法；\"):\n            caculator = Caculator(a, b)\n            with open(\"../allure_print_screen/2.png\", mode=\"rb\") as f:\n                file = f.read()\n                allure.attach(file, \"报错页面截图\", attachment_type=allure.attachment_type.PNG)\n            try:\n                # 可能产生异常的代码块\n                assert caculator.div() == expected\n                logging.info(\"这是test_case_02测试用例\")\n    \n            except TypeError:\n                # 处理异常的代码块\n                logging.error(\"TypeError: 输入的数据a、b数据类型不合法\")\n>               assert False, \"输入数据a、b不合法\"\nE               AssertionError: 输入数据a、b不合法\nE               assert False\n\ntest_case_02.py:106: AssertionError"}, "description": "\n        测试div()函数对输入数据的数据类型报错提示\n        :param a: 除int整型、float浮点型、double浮点型以外的其他数据类型\n        :param b: 除int整型、float浮点型、double浮点型以外的其他数据类型\n        :param expected: 输出报错提示: 输入的数据a、b数据类型不合法；\n        :return: 返回报错提示：输入的数据a、b数据类型不合法；\n        ", "steps": [{"name": "1、输入数据a、b, a、b为除int整型、float浮点型、double浮点型以外的其他数据类型,调用add()方法；", "status": "failed", "statusDetails": {"message": "AssertionError: 输入数据a、b不合法\nassert False\n", "trace": "  File \"D:\\开发项目\\Caculator\\test_case\\test_case_02.py\", line 106, in test_div_data_type_error\n    assert False, \"输入数据a、b不合法\"\n"}, "attachments": [{"name": "报错页面截图", "source": "5d6b2b71-8f49-487c-b9e7-5d20cb08c4a7-attachment.png", "type": "image/png"}], "start": 1715221681950, "stop": 1715221681950}], "attachments": [{"name": "log", "source": "85808b58-dcfd-4e8a-aea7-7765a8aa0654-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "a", "value": "'a'"}, {"name": "b", "value": "'b'"}, {"name": "expected", "value": "'输入数据a、b不合法'"}], "start": 1715221681950, "stop": 1715221681950, "uuid": "1ef58af6-90dc-4af3-b307-c4793e83fe3b", "historyId": "50d3b782be8dff70457ab19c7be5749f", "testCaseId": "b4ae09ed85a521d9d8dbfaa82d2892ba", "fullName": "test_case.test_case_02.TestCase#test_div_data_type_error", "labels": [{"name": "tag", "value": "run(order=2)"}, {"name": "tag", "value": "test_data_type_error"}, {"name": "tag", "value": "@pytest.mark.xfail"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_case_02"}, {"name": "subSuite", "value": "TestCase"}, {"name": "host", "value": "wangmin"}, {"name": "thread", "value": "3468-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_case_02"}], "links": [{"type": "issue", "url": "http://192.168.40.134:8080/projects/BUG/issues/BUG-1?filter=allopenissues", "name": "Bug管理系统"}, {"type": "tms", "url": "http://192.168.40.134:8080/projects/CACULATOR/issues/CACULATOR-2?filter=allissues", "name": "用例管理系统"}]}