{"name": "用例标题：添加成员信息成功", "status": "broken", "statusDetails": {"message": "IndexError: tuple index out of range", "trace": "args = (), kwargs = {}\n\n    def inner(*args, **kwargs):\n        \"\"\"\n        内函数，实现封装处理异常捕获到的代码\n        :param args: 不定长参数，是个元组； 其中，args[0] 是实例对象，相当于 self\n        :param kwargs:\n        :return:\n        \"\"\"\n        # 初始化赋值\n        try:\n            # 当被装饰的函数发生异常，就捕获并保存数据记录\n>           func(*args, **kwargs)\n\n..\\page_obj\\auto_exception_screen_shot.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\page_obj\\base_page.py:35: in __init__\n    self.driver.maximize_window()\nD:\\python3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:499: in maximize_window\n    self.execute(command, None)\nD:\\python3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000171B148BFB0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: failed to change window state to...07FF7436181FF]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD36C4257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFD3884AF08+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: failed to change window state to 'normal', current state is 'maximized'\nE         (Session info: chrome=130.0.6723.58)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7436AFDA5+29557]\nE       \t(No symbol) [0x00007FF743622240]\nE       \t(No symbol) [0x00007FF7434DB6EA]\nE       \t(No symbol) [0x00007FF7434B3FBE]\nE       \t(No symbol) [0x00007FF7434B1283]\nE       \t(No symbol) [0x00007FF7434B08E9]\nE       \t(No symbol) [0x00007FF743590A61]\nE       \t(No symbol) [0x00007FF7435574FA]\nE       \t(No symbol) [0x00007FF7435788A3]\nE       \t(No symbol) [0x00007FF7435572A3]\nE       \t(No symbol) [0x00007FF7435212DF]\nE       \t(No symbol) [0x00007FF743522451]\nE       \tGetHandleVerifier [0x00007FF7439DDCBD+3363469]\nE       \tGetHandleVerifier [0x00007FF743A29B47+3674391]\nE       \tGetHandleVerifier [0x00007FF743A1EAEB+3629243]\nE       \tGetHandleVerifier [0x00007FF74376FC66+815670]\nE       \t(No symbol) [0x00007FF74362D6EF]\nE       \t(No symbol) [0x00007FF7436292B4]\nE       \t(No symbol) [0x00007FF743629450]\nE       \t(No symbol) [0x00007FF7436181FF]\nE       \tBaseThreadInitThunk [0x00007FFD36C4257D+29]\nE       \tRtlUserThreadStart [0x00007FFD3884AF08+40]\n\nD:\\python3\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <class 'selenium_test_WeCom.test_case.test_wecom.TestWeCom'>\n\n    def setup_class(self):\n        \"\"\"\n        复用 cookie 登录\n        1、登录成功后，获取 cookies 信息\n        2、将 cookies 存入本地文件\n        3、从本地获取 cookies\n        4、为 self.driver 实例植入 cookie\n        5、退出\n        6、复用 cookie 登录\n        :return:\n        \"\"\"\n>       self.home = LoginPage().reuse_cookies_login()\n\ntest_wecom.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (), kwargs = {}\n\n    def inner(*args, **kwargs):\n        \"\"\"\n        内函数，实现封装处理异常捕获到的代码\n        :param args: 不定长参数，是个元组； 其中，args[0] 是实例对象，相当于 self\n        :param kwargs:\n        :return:\n        \"\"\"\n        # 初始化赋值\n        try:\n            # 当被装饰的函数发生异常，就捕获并保存数据记录\n            func(*args, **kwargs)\n        except Exception as e:\n            print(\"此处发生了异常\")\n>           driver = args[0].driver\nE           IndexError: tuple index out of range\n\n..\\page_obj\\auto_exception_screen_shot.py:26: IndexError"}, "description": "\n        添加成员信息\n        1、输入 姓名、企业邮箱、手机号\n        2、截图\n        3、点击保存\n        4、多断言：\n          所有的成员姓名是否包含添加时输入的姓名；\n          所有的成员手机号是否包含添加时输入的手机号；\n          所有的成员邮箱是否包含添加时输入的邮箱。\n        :return: 跳转到通讯录页\n        ", "attachments": [{"name": "log", "source": "7362fc63-50ec-4044-9a78-98f25f4087af-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "name", "value": "'Tony'"}, {"name": "account", "value": "'test_01'"}, {"name": "phone_number", "value": "'12345678899'"}, {"name": "business_mail", "value": "'1585736247@qq.com'"}], "start": 1729254952243, "stop": 1729254952243, "uuid": "09499c10-26e1-4fbe-b4e0-f19f0ee6f2d6", "historyId": "90c4bf5a4f0bb02e5ef2942aacbef707", "testCaseId": "97a9c77420122ccf37d2d3af803f5a78", "fullName": "test_case.test_wecom.TestWeCom#test_add_member", "labels": [{"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_wecom"}, {"name": "subSuite", "value": "TestWeCom"}, {"name": "host", "value": "wangmin"}, {"name": "thread", "value": "11284-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_wecom"}]}